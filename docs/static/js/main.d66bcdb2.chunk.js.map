{"version":3,"sources":["images/logo.png","components/CharacterCard.js","components/CharacterList.js","components/Filters.js","services/getDataFromApi.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","CharacterCard","props","className","src","photo","alt","name","species","CharacterList","CharacterLis","characters","map","character","key","id","Filters","htmlFor","type","onChange","ev","charactersFilter","target","value","placeholder","getDataFromApi","fetch","then","response","json","data","results","item","image","status","origin","episodes","episode","length","App","useState","setCharacters","nameFilter","setNameFilter","useEffect","FilteredCharacters","filter","toLowerCase","includes","Image","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iIAAAA,EAAOC,QAAU,IAA0B,kC,0NCe5BC,MAZf,SAAuBC,GAGrB,OACE,wBAAIC,UAAU,kBACZ,yBAAKA,UAAU,kBAAkBC,IAAKF,EAAMG,MAAOC,IAAG,UAAKJ,EAAMK,QACjE,oCAAUL,EAAMK,MAChB,uCAAaL,EAAMM,W,MCEVC,MARf,SAAuBP,GACrB,IAAMQ,EAAeR,EAAMS,WAAWC,KAAI,SAACC,GACzC,OAAO,kBAAC,EAAD,CAAeC,IAAKD,EAAUE,GAAIV,MAAOQ,EAAUR,MAAOE,KAAMM,EAAUN,KAAMC,QAASK,EAAUL,aAG5G,OAAO,wBAAIL,UAAU,kBAAkBO,ICM1BM,MAbf,SAAiBd,GAKf,OACE,8BACE,2BAAOe,QAAQ,qBAAf,mCACA,2BAAOF,GAAG,oBAAoBG,KAAK,OAAOC,SAPxB,SAACC,GACrBlB,EAAMmB,iBAAiBD,EAAGE,OAAOC,QAMoCC,YAAY,WCWtEC,G,MArBQ,WACrB,OACEC,MAAM,qDAEHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,OAAOA,EAAKC,QAAQnB,KAAI,SAACoB,GACvB,MAAO,CACLjB,GAAIiB,EAAKjB,GACTR,KAAMyB,EAAKzB,KACXC,QAASwB,EAAKxB,QACdH,MAAO2B,EAAKC,MACZC,OAAQF,EAAKE,OACbC,OAAQH,EAAKG,OAAO5B,KACpB6B,SAAUJ,EAAKK,QAAQC,gBC0BpBC,MAjCf,WAAgB,IAAD,EACuBC,mBAAS,IADhC,mBACN7B,EADM,KACM8B,EADN,OAEuBD,mBAAS,IAFhC,mBAENE,EAFM,KAEMC,EAFN,KAGbC,qBAAU,WACRnB,IAAiBE,MAAK,SAACG,GACrBW,EAAcX,QAEf,IAGH,IAMMe,EAAqBlC,EAAWmC,QAAO,SAACjC,GAC5C,OAAOA,EAAUN,KAAKwC,cAAcC,SAASN,EAAWK,kBAG1D,OACE,yBAAK5C,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAK6C,IAAO3C,IAAI,4BAEvB,8BACE,kBAAC,EAAD,CAASe,iBAhBU,SAACS,GACxBa,EAAcb,MAgBV,kBAAC,EAAD,CAAenB,WAAYkC,OCtBfK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d66bcdb2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.75509f2e.png\";","import React from 'react';\nimport '../stylesheets/characterCard.css';\n\nfunction CharacterCard(props) {\n  // console.log(props);\n\n  return (\n    <li className='character-card'>\n      <img className='character-photo' src={props.photo} alt={`${props.name}`} />\n      <p>Name: {props.name}</p>\n      <p>Species: {props.species}</p>\n    </li>\n  );\n}\n\nexport default CharacterCard;\n","import React from 'react';\nimport CharacterCard from './CharacterCard';\nimport '../stylesheets/characterList.css';\n\nfunction CharacterList(props) {\n  const CharacterLis = props.characters.map((character) => {\n    return <CharacterCard key={character.id} photo={character.photo} name={character.name} species={character.species} />;\n  });\n\n  return <ul className='character-list'>{CharacterLis}</ul>;\n}\n\nexport default CharacterList;\n","import React from 'react';\n\nfunction Filters(props) {\n  const inputListener = (ev) => {\n    props.charactersFilter(ev.target.value);\n  };\n\n  return (\n    <form>\n      <label htmlFor='characterSearcher'>Busca a tu personaje favorito: </label>\n      <input id='characterSearcher' type='text' onChange={inputListener} placeholder='Rick'></input>\n    </form>\n  );\n}\n\nexport default Filters;\n","const getDataFromApi = () => {\n  return (\n    fetch('https://rickandmortyapi.com/api/character/?page=1')\n      //   https://rickandmortyapi.com/api/character/?page=1\n      .then((response) => response.json())\n      .then((data) => {\n        return data.results.map((item) => {\n          return {\n            id: item.id,\n            name: item.name,\n            species: item.species,\n            photo: item.image,\n            status: item.status,\n            origin: item.origin.name,\n            episodes: item.episode.length,\n          };\n        });\n      })\n  );\n};\n\nexport default getDataFromApi;\n","import React, { useEffect, useState } from 'react';\nimport Image from '../images/logo.png';\nimport CharacterList from './CharacterList';\nimport Filters from './Filters';\nimport '../stylesheets/App.css';\nimport getDataFromApi from '../services/getDataFromApi';\n\nfunction App() {\n  const [characters, setCharacters] = useState([]);\n  const [nameFilter, setNameFilter] = useState('');\n  useEffect(() => {\n    getDataFromApi().then((data) => {\n      setCharacters(data);\n    });\n  }, []);\n\n  // Filter\n  const charactersFilter = (data) => {\n    setNameFilter(data);\n  };\n\n  // console.log('name:', nameFilter);\n\n  const FilteredCharacters = characters.filter((character) => {\n    return character.name.toLowerCase().includes(nameFilter.toLowerCase());\n  });\n\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <img src={Image} alt='Logo de Rick and Morty' />\n      </header>\n      <main>\n        <Filters charactersFilter={charactersFilter} />\n        <CharacterList characters={FilteredCharacters} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}