{"version":3,"sources":["images/logo.png","images/characternotfound.jpg","serviceWorker.js","services/getDataFromApi.js","components/Filters.js","components/CharacterCard.js","components/CharacterNotFound.js","components/CharacterList.js","components/CharacterSearch.js","components/CharacterDetail.js","components/App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","getDataFromApi","fetch","then","response","json","data","results","map","item","id","name","species","photo","image","status","origin","episodes","episode","length","Filters","props","statusListener","ev","statusFilter","target","value","className","htmlFor","type","placeholder","onChange","preventDefault","charactersFilter","nameFilter","style","cursor","CharacterCard","to","src","alt","title","CharacterNotFound","Image","CharacterList","characterLis","characters","character","key","CharacterSearch","aliveDeadFilter","CharacterDetail","App","useState","setCharacters","setNameFilter","setAliveDeadFilter","useEffect","sort","a","b","FilteredCharacters","filter","toLowerCase","includes","exact","path","render","characterId","params","foundCharacter","find","parseInt","undefined","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.241f87a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.75509f2e.png\";","module.exports = __webpack_public_path__ + \"static/media/characternotfound.f47281a1.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const getDataFromApi = () => {\n  return fetch('https://rickandmortyapi.com/api/character/?page=1')\n    .then((response) => response.json())\n    .then((data) => {\n      return data.results.map((item) => {\n        return {\n          id: item.id,\n          name: item.name,\n          species: item.species,\n          photo: item.image,\n          status: item.status,\n          origin: item.origin.name,\n          episodes: item.episode.length,\n        };\n      });\n    });\n};\nexport default getDataFromApi;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../stylesheets/filters.scss';\n\n// Listen input value and send it to App in order to search a character\nfunction Filters(props) {\n  const inputListener = (ev) => {\n    ev.preventDefault();\n    props.charactersFilter(ev.target.value);\n  };\n\n  // Listen input status\n  const statusListener = (ev) => {\n    props.statusFilter(ev.target.value);\n  };\n\n  return (\n    <form>\n      <div>\n        <label className='text' htmlFor='characterSearcher'>\n          Find your favourite character:\n        </label>\n        <input className='input-text' id='characterSearcher' type='text' placeholder='example: Rick' onChange={inputListener} value={props.nameFilter}></input>\n      </div>\n      <div>\n        <p className='text'>Is your character alive?</p>\n        <div className='status-radio'>\n          <div className='status-text'>\n            <label htmlFor='all' className='text'>\n              <input style={{ cursor: 'pointer' }} id='all' type='radio' value={'all'} name='status' onChange={statusListener} />\n              {''} All\n            </label>\n          </div>\n          <div className='status-text'>\n            <label htmlFor='alive' className='text'>\n              <input style={{ cursor: 'pointer' }} id='alive' type='radio' value='Alive' name='status' onChange={statusListener} />\n              {''} Alive\n            </label>\n          </div>\n          <div className='status-text'>\n            <label htmlFor='dead' className='text'>\n              <input style={{ cursor: 'pointer' }} id='dead' type='radio' value='Dead' name='status' onChange={statusListener} />\n              {''} Dead\n            </label>\n          </div>\n          <div className='status-text'>\n            <label htmlFor='unknown' className='text'>\n              <input style={{ cursor: 'pointer' }} id='unknown' type='radio' value='unknown' name='status' onChange={statusListener} />\n              {''} Unknown\n            </label>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n}\n\n// Exports and propTypes\nexport default Filters;\nFilters.propTypes = {\n  charactersFilter: PropTypes.func,\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport '../stylesheets/characterCard.scss';\n\n// Paint each character card in the list\nfunction CharacterCard(props) {\n  return (\n    <li className='character-card'>\n      <Link className='character-card-link' to={`/character/${props.id}`}>\n        <img className='character-card-photo' src={props.photo} alt={`${props.name}`} title={`${props.name}`} />\n        <div className='character-card-text'>\n          <h3 className='character-card-name'>{props.name}</h3>\n          <p className='character-card-species'> {props.species}</p>\n        </div>\n      </Link>\n    </li>\n  );\n}\n\n// Exports and propTypes\nexport default CharacterCard;\nCharacterCard.propTypes = {\n  id: PropTypes.number,\n  photo: PropTypes.string,\n  name: PropTypes.string,\n  species: PropTypes.string,\n};\n","import React from 'react';\nimport '../stylesheets/characterDetail.scss';\nimport Image from '../images/characternotfound.jpg'; // Teddy Bear image\n//Shares stylesheets with characterDetail\n\n// When you don't find a character matching your search\nfunction CharacterNotFound(props) {\n  return (\n    <div className='character-detail'>\n      <main className='character-detail-card'>\n        <img className='error-image' src={Image} alt='character not found'></img>\n        <div>\n          <h3 className='error-text'>We're so sorry</h3>\n          <p className='error-text'>\n            There is no character <br /> with your search: <br /> {props.nameFilter}\n          </p>\n        </div>\n      </main>\n    </div>\n  );\n}\n\n// Exports and propTypes\nexport default CharacterNotFound;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../stylesheets/characterList.scss';\nimport CharacterCard from './CharacterCard'; // Cards for each character in the list\nimport CharacterNotFound from './CharacterNotFound'; // When you don't find a character\n\nfunction CharacterList(props) {\n  // Search in the array all the characters that matches our input value\n  const characterLis = props.characters.map((character) => {\n    return <CharacterCard key={character.id} id={character.id} photo={character.photo} name={character.name} species={character.species} />;\n  });\n\n  // if there is no character matching our search show CharacterNotFound message\n  if (characterLis.length === 0) return <CharacterNotFound nameFilter={props.nameFilter} />;\n  return <ul className='character-list'>{characterLis}</ul>;\n}\n\n// Exports and propTypes\nexport default CharacterList;\nCharacterList.propTypes = {\n  characters: PropTypes.array,\n  character: PropTypes.object,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Filters from './Filters'; // input for search\nimport CharacterList from './CharacterList'; // List of characters\n\n// Unifies the search and find components\nfunction CharacterSearch(props) {\n  return (\n    <>\n      <Filters charactersFilter={props.charactersFilter} nameFilter={props.nameFilter} statusFilter={props.statusFilter} aliveDeadFilter={props.aliveDeadFilter} />\n      <CharacterList characters={props.characters} nameFilter={props.nameFilter} />\n    </>\n  );\n}\n\n// Exports and propTypes\nexport default CharacterSearch;\nCharacterSearch.propTypes = {\n  charactersFilter: PropTypes.func,\n  characters: PropTypes.array,\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../stylesheets/characterDetail.scss';\nimport PropTypes from 'prop-types';\n\n// Paint character Details card\nfunction CharacterDetail(props) {\n  // dead icon\n  const isDead = () => {\n    if (props.character.status === 'Dead') return <i className='fas fa-skull-crossbones'></i>;\n    else {\n      return <i className='far fa-smile'></i>;\n    }\n  };\n  // Human or alien icon\n  const isHuman = () => {\n    if (props.character.species === 'Human') return <i className='fas fa-male'></i>;\n    else {\n      return <i className='fab fa-reddit-alien'></i>;\n    }\n  };\n  // paint\n  return (\n    <div className='character-detail'>\n      <main className='character-detail-box'>\n        <Link className='character-detail-back-link' to='/'>\n          <div className='character-detail-back-link-icons'>\n            <i className='fas fa-angle-left' />\n            <p className='character-detail-back-text'>Back</p>\n          </div>\n        </Link>\n        <div className='character-detail-card'>\n          <img src={props.character.photo} alt={props.character.name}></img>\n          <div className='character-detail-info'>\n            <h3>{props.character.name}</h3>\n            <p>\n              Status: {props.character.status} {isDead()}\n            </p>\n            <p>\n              Species: {props.character.species} {isHuman()}\n            </p>\n            <p>Origin: {props.character.origin}</p>\n            <p>Episodes: {props.character.episodes}</p>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\n// Exports and propTypes\nexport default CharacterDetail;\nCharacterDetail.propTypes = {\n  character: PropTypes.object,\n};\n","import React, { useEffect, useState } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Image from '../images/logo.png'; // Header image\nimport getDataFromApi from '../services/getDataFromApi'; // Api\nimport CharacterSearch from './CharacterSearch'; // Search input\nimport CharacterDetail from './CharacterDetail'; // Details card\nimport '../stylesheets/App.scss';\n\nfunction App() {\n  //states\n  const [characters, setCharacters] = useState([]); //Array\n  const [nameFilter, setNameFilter] = useState(''); //input value\n  const [aliveDeadFilter, setAliveDeadFilter] = useState('all'); //input status\n\n  //get characters from API and put them in the state\n  useEffect(() => {\n    getDataFromApi().then((data) => {\n      setCharacters(data);\n    });\n  }, []);\n\n  // Filters\n  const charactersFilter = (data) => {\n    setNameFilter(data);\n  };\n  const statusFilter = (data) => {\n    setAliveDeadFilter(data);\n  };\n\n  // Organize characters by name\n  characters.sort(function (a, b) {\n    if (a.name < b.name) return -1;\n    if (a.name > b.name) return 1;\n    return 0;\n  });\n\n  // Filter characters by search\n  const FilteredCharacters = characters\n    .filter((character) => {\n      return character.name.toLowerCase().includes(nameFilter.toLowerCase());\n    })\n    .filter((character) => {\n      if (aliveDeadFilter === 'all') {\n        return true;\n      } else {\n        return character.status === aliveDeadFilter;\n      }\n    });\n\n  // Router\n  const renderCharacterDetail = (props) => {\n    const characterId = props.match.params.characterId;\n    const foundCharacter = characters.find((character) => {\n      return character.id === parseInt(characterId);\n    });\n    if (foundCharacter !== undefined) return <CharacterDetail character={foundCharacter} />;\n  };\n\n  // Paint\n  return (\n    <div className='App'>\n      <header className='header'>\n        <img className='header-image' src={Image} alt='Logo de Rick and Morty' />\n      </header>\n      <main>\n        <Switch>\n          <Route exact path='/'>\n            <CharacterSearch characters={FilteredCharacters} charactersFilter={charactersFilter} nameFilter={nameFilter} statusFilter={statusFilter} aliveDeadFilter={aliveDeadFilter} />\n          </Route>\n          <Route path='/character/:characterId' render={renderCharacterDetail} />\n        </Switch>\n      </main>\n      <footer className='footer'>\n        <p className='footer-text'>© Created by Eva López Merino - 2020</p>\n      </footer>\n    </div>\n  );\n}\n\n// Exports and propTypes\nexport default App;\nApp.propTypes = {\n  match: PropTypes.any,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './stylesheets/index.scss';\nimport App from './components/App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}