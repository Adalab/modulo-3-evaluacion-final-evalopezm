{"version":3,"sources":["images/logo.png","images/characternotfound.jpg","components/CharacterCard.js","components/CharacterList.js","components/Filters.js","components/CharacterSearch.js","services/getDataFromApi.js","components/CharacterDetail.js","components/CharacterNotFound.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","CharacterCard","props","className","to","id","src","photo","alt","name","title","species","CharacterList","characterLis","characters","map","character","key","Filters","htmlFor","type","placeholder","onChange","ev","preventDefault","charactersFilter","target","value","CharacterSearch","getDataFromApi","fetch","then","response","json","data","results","item","image","status","origin","episodes","episode","length","CharacterDetail","CharacterNotFound","Image","App","useState","setCharacters","nameFilter","setNameFilter","useEffect","console","log","FilteredCharacters","filter","toLowerCase","includes","renderCharacterDetail","characterId","match","params","foundCharacter","find","parseInt","undefined","exact","path","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b64a0b7a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.75509f2e.png\";","module.exports = __webpack_public_path__ + \"static/media/characternotfound.f47281a1.jpg\";","import React from 'react';\nimport '../stylesheets/characterCard.scss';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nfunction CharacterCard(props) {\n  return (\n    <li className='character-card'>\n      <Link className='character-card-link' to={`/character/${props.id}`}>\n        <img className='character-card-photo' src={props.photo} alt={`${props.name}`} title={`${props.name}`} />\n        <div className='character-card-text'>\n          <h3 className='character-card-name'>{props.name}</h3>\n          <p className='character-card-species'> {props.species}</p>\n        </div>\n      </Link>\n    </li>\n  );\n}\n\nexport default CharacterCard;\nCharacterCard.propTypes = {\n  id: PropTypes.number,\n  photo: PropTypes.string,\n  name: PropTypes.string,\n  species: PropTypes.string,\n};\n","import React from 'react';\nimport CharacterCard from './CharacterCard';\nimport '../stylesheets/characterList.scss';\nimport PropTypes from 'prop-types';\n\nfunction CharacterList(props) {\n  const characterLis = props.characters.map((character) => {\n    return <CharacterCard key={character.id} id={character.id} photo={character.photo} name={character.name} species={character.species} />;\n  });\n\n  return <ul className='character-list'>{characterLis}</ul>;\n}\n\nexport default CharacterList;\nCharacterList.propTypes = {\n  characters: PropTypes.array,\n  character: PropTypes.object,\n};\n","import React from 'react';\nimport '../stylesheets/filters.scss';\nimport PropTypes from 'prop-types';\n\nfunction Filters(props) {\n  const inputListener = (ev) => {\n    ev.preventDefault();\n    props.charactersFilter(ev.target.value);\n  };\n\n  return (\n    <form>\n      <label className='text' htmlFor='characterSearcher'>\n        Busca a tu personaje favorito:{' '}\n      </label>\n      <input className='input' id='characterSearcher' type='text' placeholder='example: Rick' onChange={inputListener}></input>\n    </form>\n  );\n}\n\nexport default Filters;\nFilters.propTypes = {\n  charactersFilter: PropTypes.func,\n};\n","import React from 'react';\nimport CharacterList from './CharacterList';\nimport Filters from './Filters';\nimport PropTypes from 'prop-types';\n\nfunction CharacterSearch(props) {\n  return (\n    <>\n      <Filters charactersFilter={props.charactersFilter} />\n      <CharacterList characters={props.characters} />\n    </>\n  );\n}\n\nexport default CharacterSearch;\nCharacterSearch.propTypes = {\n  charactersFilter: PropTypes.func,\n  characters: PropTypes.array,\n};\n","const getDataFromApi = () => {\n  return (\n    fetch('https://rickandmortyapi.com/api/character/?page=1')\n      //   https://rickandmortyapi.com/api/character/?page=1\n      .then((response) => response.json())\n      .then((data) => {\n        return data.results.map((item) => {\n          return {\n            id: item.id,\n            name: item.name,\n            species: item.species,\n            photo: item.image,\n            status: item.status,\n            origin: item.origin.name,\n            episodes: item.episode.length,\n          };\n        });\n      })\n  );\n};\n\nexport default getDataFromApi;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../stylesheets/characterDetail.scss';\nimport PropTypes from 'prop-types';\n\nfunction CharacterDetail(props) {\n  const isDead = () => {\n    if (props.character.status === 'Dead') return <i className='fas fa-skull-crossbones'></i>;\n    else {\n      return <i className='far fa-smile'></i>;\n    }\n  };\n\n  const isHuman = () => {\n    if (props.character.species === 'Human') return <i className='fas fa-male'></i>;\n    else {\n      return <i className='fab fa-reddit-alien'></i>;\n    }\n  };\n\n  return (\n    <div className='character-detail'>\n      <main>\n        <Link className='character-detail-back-link' to='/'>\n          <div className='character-detail-back-link-icons'>\n            <i className='fas fa-angle-left' />\n            <p className='character-detail-back-text'>Back</p>\n          </div>\n        </Link>\n        <div className='character-detail-card'>\n          <img src={props.character.photo} alt={props.character.name}></img>\n          <div className='character-detail-info'>\n            <h3>{props.character.name}</h3>\n            <p>\n              Status: {props.character.status} {isDead()}\n            </p>\n            <p>\n              Species: {props.character.species}\n              {isHuman()}\n            </p>\n            <p>Origin: {props.character.origin}</p>\n            <p>Episodes: {props.character.episodes}</p>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default CharacterDetail;\nCharacterDetail.propTypes = {\n  character: PropTypes.object,\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Image from '../images/characternotfound.jpg';\nimport '../stylesheets/characterDetail.scss';\n\nfunction CharacterNotFound(props) {\n  return (\n    <div className='character-detail'>\n      <main>\n        <Link className='character-detail-back-link' to='/'>\n          <div className='character-detail-back-link-icons'>\n            <i className='fas fa-angle-left' />\n            <p className='character-detail-back-text'>Back</p>\n          </div>\n        </Link>\n        <div className='character-detail-card'>\n          <img className='error-image' src={Image} alt='character not found'></img>\n          <div>\n            <h3 className='error-text'>We're so sorry</h3>\n            <p className='error-text'>\n              There is no character <br /> with your search\n            </p>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default CharacterNotFound;\n","import React, { useEffect, useState } from 'react';\nimport Image from '../images/logo.png';\nimport CharacterSearch from './CharacterSearch';\nimport '../stylesheets/App.scss';\nimport getDataFromApi from '../services/getDataFromApi';\nimport CharacterDetail from './CharacterDetail';\nimport { Switch, Route } from 'react-router-dom';\nimport CharacterNotFound from './CharacterNotFound';\nimport PropTypes from 'prop-types';\n\nfunction App() {\n  //states\n  const [characters, setCharacters] = useState([]);\n  const [nameFilter, setNameFilter] = useState('');\n  useEffect(() => {\n    getDataFromApi().then((data) => {\n      setCharacters(data);\n    });\n  }, []);\n\n  // Filters\n  const charactersFilter = (data) => {\n    setNameFilter(data);\n  };\n  console.log(nameFilter);\n\n  const FilteredCharacters = characters.filter((character) => {\n    return character.name.toLowerCase().includes(nameFilter.toLowerCase());\n  });\n  if (FilteredCharacters.length === 0) return <CharacterNotFound />;\n\n  // const FilteredCharacters = (props) => {\n  //   characters.filter((character) => {\n  //     return character.name.toLowerCase().includes(nameFilter.toLowerCase());\n  //   });\n  //   if (FilteredCharacters.length === 0) return <CharacterNotFound />;\n  // };\n\n  // Router\n  const renderCharacterDetail = (props) => {\n    const characterId = props.match.params.characterId;\n    const foundCharacter = characters.find((character) => {\n      return character.id === parseInt(characterId);\n    });\n    if (foundCharacter !== undefined) return <CharacterDetail character={foundCharacter} />;\n  };\n\n  return (\n    <div className='App'>\n      <header className='header'>\n        <img className='header-image' src={Image} alt='Logo de Rick and Morty' />\n      </header>\n      <main>\n        <Switch>\n          <Route exact path='/'>\n            <CharacterSearch characters={FilteredCharacters} charactersFilter={charactersFilter} />\n          </Route>\n          <Route path='/character/:characterId' render={renderCharacterDetail} />\n          <Route exact path='/characternotfound' render={renderCharacterDetail} />\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\nApp.propTypes = {\n  match: PropTypes.any,\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}