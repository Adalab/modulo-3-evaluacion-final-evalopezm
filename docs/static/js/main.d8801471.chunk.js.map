{"version":3,"sources":["images/logo.png","images/characternotfound.jpg","serviceWorker.js","services/getDataFromApi.js","components/Filters.js","components/CharacterCard.js","components/CharacterNotFound.js","components/CharacterList.js","components/CharacterSearch.js","components/CharacterDetail.js","components/App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","getDataFromApi","fetch","then","response","json","data","results","map","item","id","name","species","photo","image","status","origin","episodes","episode","length","Filters","props","className","htmlFor","type","placeholder","onChange","ev","preventDefault","charactersFilter","target","value","nameFilter","CharacterCard","to","src","alt","title","CharacterNotFound","Image","CharacterList","characterLis","characters","character","key","CharacterSearch","CharacterDetail","App","useState","setCharacters","setNameFilter","useEffect","sort","a","b","FilteredCharacters","filter","toLowerCase","includes","exact","path","render","characterId","params","foundCharacter","find","parseInt","undefined","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d8801471.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.75509f2e.png\";","module.exports = __webpack_public_path__ + \"static/media/characternotfound.f47281a1.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const getDataFromApi = () => {\n  return fetch('https://rickandmortyapi.com/api/character/?page=1')\n    .then((response) => response.json())\n    .then((data) => {\n      return data.results.map((item) => {\n        return {\n          id: item.id,\n          name: item.name,\n          species: item.species,\n          photo: item.image,\n          status: item.status,\n          origin: item.origin.name,\n          episodes: item.episode.length,\n        };\n      });\n    });\n};\nexport default getDataFromApi;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../stylesheets/filters.scss';\n\n// Listen input value and send it to App in order to search a character\nfunction Filters(props) {\n  const inputListener = (ev) => {\n    ev.preventDefault();\n    props.charactersFilter(ev.target.value);\n  };\n\n  return (\n    <form>\n      <label className='text' htmlFor='characterSearcher'>\n        Busca a tu personaje favorito:\n      </label>\n      <input className='input' id='characterSearcher' type='text' placeholder='example: Rick' onChange={inputListener} value={props.nameFilter}></input>\n    </form>\n  );\n}\n\n// Exports and propTypes\nexport default Filters;\nFilters.propTypes = {\n  charactersFilter: PropTypes.func,\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport '../stylesheets/characterCard.scss';\n\n// Paint each character card in the list\nfunction CharacterCard(props) {\n  return (\n    <li className='character-card'>\n      <Link className='character-card-link' to={`/character/${props.id}`}>\n        <img className='character-card-photo' src={props.photo} alt={`${props.name}`} title={`${props.name}`} />\n        <div className='character-card-text'>\n          <h3 className='character-card-name'>{props.name}</h3>\n          <p className='character-card-species'> {props.species}</p>\n        </div>\n      </Link>\n    </li>\n  );\n}\n\n// Exports and propTypes\nexport default CharacterCard;\nCharacterCard.propTypes = {\n  id: PropTypes.number,\n  photo: PropTypes.string,\n  name: PropTypes.string,\n  species: PropTypes.string,\n};\n","import React from 'react';\nimport '../stylesheets/characterDetail.scss';\nimport Image from '../images/characternotfound.jpg'; // Teddy Bear image\n//Shares stylesheets with characterDetail\n\n// When you don't find a character matching your search\nfunction CharacterNotFound(props) {\n  return (\n    <div className='character-detail'>\n      <main className='character-detail-card'>\n        <img className='error-image' src={Image} alt='character not found'></img>\n        <div>\n          <h3 className='error-text'>We're so sorry</h3>\n          <p className='error-text'>\n            There is no character <br /> with your search: <br /> {props.nameFilter}\n          </p>\n        </div>\n      </main>\n    </div>\n  );\n}\n\n// Exports and propTypes\nexport default CharacterNotFound;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../stylesheets/characterList.scss';\nimport CharacterCard from './CharacterCard'; // Cards for each character in the list\nimport CharacterNotFound from './CharacterNotFound'; // When you don't find a character\n\nfunction CharacterList(props) {\n  // Search in the array all the characters that matches our input value\n  const characterLis = props.characters.map((character) => {\n    return <CharacterCard key={character.id} id={character.id} photo={character.photo} name={character.name} species={character.species} />;\n  });\n\n  // if there is no character matching our search show CharacterNotFound message\n  if (characterLis.length === 0) return <CharacterNotFound nameFilter={props.nameFilter} />;\n  return <ul className='character-list'>{characterLis}</ul>;\n}\n\n// Exports and propTypes\nexport default CharacterList;\nCharacterList.propTypes = {\n  characters: PropTypes.array,\n  character: PropTypes.object,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Filters from './Filters'; // input for search\nimport CharacterList from './CharacterList'; // List of characters\n\n// Unifies the search and find components\nfunction CharacterSearch(props) {\n  return (\n    <>\n      <Filters charactersFilter={props.charactersFilter} nameFilter={props.nameFilter} />\n      <CharacterList characters={props.characters} nameFilter={props.nameFilter} />\n    </>\n  );\n}\n\n// Exports and propTypes\nexport default CharacterSearch;\nCharacterSearch.propTypes = {\n  charactersFilter: PropTypes.func,\n  characters: PropTypes.array,\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../stylesheets/characterDetail.scss';\nimport PropTypes from 'prop-types';\n\n// Paint character Details card\nfunction CharacterDetail(props) {\n  // dead icon\n  const isDead = () => {\n    if (props.character.status === 'Dead') return <i className='fas fa-skull-crossbones'></i>;\n    else {\n      return <i className='far fa-smile'></i>;\n    }\n  };\n  // Human or alien icon\n  const isHuman = () => {\n    if (props.character.species === 'Human') return <i className='fas fa-male'></i>;\n    else {\n      return <i className='fab fa-reddit-alien'></i>;\n    }\n  };\n  // paint\n  return (\n    <div className='character-detail'>\n      <main>\n        <Link className='character-detail-back-link' to='/'>\n          <div className='character-detail-back-link-icons'>\n            <i className='fas fa-angle-left' />\n            <p className='character-detail-back-text'>Back</p>\n          </div>\n        </Link>\n        <div className='character-detail-card'>\n          <img src={props.character.photo} alt={props.character.name}></img>\n          <div className='character-detail-info'>\n            <h3>{props.character.name}</h3>\n            <p>\n              Status: {props.character.status} {isDead()}\n            </p>\n            <p>\n              Species: {props.character.species}\n              {isHuman()}\n            </p>\n            <p>Origin: {props.character.origin}</p>\n            <p>Episodes: {props.character.episodes}</p>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\n// Exports and propTypes\nexport default CharacterDetail;\nCharacterDetail.propTypes = {\n  character: PropTypes.object,\n};\n","import React, { useEffect, useState } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Image from '../images/logo.png'; // Header image\nimport getDataFromApi from '../services/getDataFromApi'; // Api\nimport CharacterSearch from './CharacterSearch'; // Search input\nimport CharacterDetail from './CharacterDetail'; // Details card\nimport '../stylesheets/App.scss';\n\nfunction App() {\n  //states\n  const [characters, setCharacters] = useState([]); //Array\n  const [nameFilter, setNameFilter] = useState(''); //input value\n  //get characters from API and put them in the state\n  useEffect(() => {\n    getDataFromApi().then((data) => {\n      setCharacters(data);\n    });\n  }, []);\n\n  // Filters\n  const charactersFilter = (data) => {\n    setNameFilter(data);\n  };\n  // Organize characters by name\n  characters.sort(function (a, b) {\n    if (a.name < b.name) return -1;\n    if (a.name > b.name) return 1;\n    return 0;\n  });\n  // Filter characters by search\n  const FilteredCharacters = characters.filter((character) => {\n    return character.name.toLowerCase().includes(nameFilter.toLowerCase());\n  });\n\n  // Router\n  const renderCharacterDetail = (props) => {\n    const characterId = props.match.params.characterId;\n    const foundCharacter = characters.find((character) => {\n      return character.id === parseInt(characterId);\n    });\n    if (foundCharacter !== undefined) return <CharacterDetail character={foundCharacter} />;\n  };\n\n  // Paint\n  return (\n    <div className='App'>\n      <header className='header'>\n        <img className='header-image' src={Image} alt='Logo de Rick and Morty' />\n      </header>\n      <main>\n        <Switch>\n          <Route exact path='/'>\n            <CharacterSearch characters={FilteredCharacters} charactersFilter={charactersFilter} nameFilter={nameFilter} />\n          </Route>\n          <Route path='/character/:characterId' render={renderCharacterDetail} />\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\n// Exports and propTypes\nexport default App;\nApp.propTypes = {\n  match: PropTypes.any,\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './stylesheets/index.scss';\nimport App from './components/App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}